/*
 * File: app/view/S3Upload.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VMS.view.S3Upload', {
    extend: 'Ext.Component',
    alias: 'widget.s3upload',

    componentCls: 'tpg-s3upload',
    html: '<div class="status">Drag &amp; Drop File Here</div>',

    initComponent: function() {
        var me = this;

        me.addEvents(
            'uploadStarted',
            'uploadProcess',
            'uploadFinish',
            'validateUpload',
            'uploadFailed'
        );

        me.processS3Upload(me);
        me.callParent(arguments);
    },

    processS3Upload: function(config) {
        this.record = config.record;
        if (config.progressBar === true) {
            this.progressBar = Ext.create('Ext.ProgressBar',{
                hidden: true
            });
        }
    },

    onRender: function() {
        this.callParent(arguments);

        var self = this;
        var htmlElement = this.getEl().dom;

        if (this.progressBar) {
            var el = this.getEl().appendChild({
                tag: 'div'
            }, true);
            this.progressBar.render(el);
        }

        htmlElement.addEventListener('dragleave', function(evt) {
            self.removeCls('over');
        }, false);

        htmlElement.addEventListener('dragover', function(evt) {
            if (evt.preventDefault) {
                evt.preventDefault(); // Necessary. Allows us to drop.
            }
            if (!this.uploadProcess || !this.uploadProcess.isPending()) {
                evt.dataTransfer.dropEffect = 'copy';
                self.addCls('over');
                return false;
            }
        }, false);

        htmlElement.addEventListener('drop', function(evt) {
            if (evt.stopPropagation) {
                evt.stopPropagation(); // stops the browser from redirecting.
            }
            if (evt.preventDefault) {
                evt.preventDefault();
            }
            if (!self.uploadProcess || !self.uploadProcess.isPending()) {
                self.uploadProcess = null;
                var valid = self.fireEvent('validateUpload', {
                    files: evt.dataTransfer.files,
                    event: evt,
                    record: self.record || null
                });

                if (valid) {
                    var fileList = evt.dataTransfer.files;
                    require(['lib/upload'], function(upload) {
                        for(var i = 0; i < fileList.length; i++) {
                            var file = fileList.item(i);
                            if (self.uploadProcess) {
                                self.uploadProcess.then(function() {
                                    return self.upload(upload, file)
                                });
                            } else {
                                self.uploadProcess = self.upload(upload, file);
                            }
                        }
                    });

                }
                self.removeCls('over');
            } else {
                Ext.Msg.alert('Unable to Upload', 'Error: ' + 'Upload is already in progress');
            }
            return false;
        }, false);
    },

    upload: function(upload, file) {
        var self = this;
        var status = this.getEl().down('.status');

        status.setHTML('Uploading ' + file.name);

        this.fireEvent('uploadStarted', {
            file: file, 
            record: this.record
        });

        if (this.progressBar) {
            this.progressBar.show();
        }
        if (this.record) {
            process = upload(file, this.record.getData());
        } else {
            process = upload(file);
        }

        return process.then(function(multipart) {
            status.setHTML("Drag &amp; Drop File Here");
            if (self.progressBar) {
                self.progressBar.hide();
            }
            self.fireEvent('uploadFinish', {
                record: multipart
            });
        }, function(error) {
            status.setHTML("Drag &amp; Drop File Here");
            if (self.progressBar) {
                self.progressBar.hide();
            }
            self.fireEvent('uploadFailed', {
                error: error
            });
        }, function (count) {
            if (Ext.isNumber(count)) {
                if (self.progressBar) {
                    self.progressBar.updateProgress(count/100);
                }
                self.fireEvent('uploadProcess', {
                    progress: count
                });
            } else if (Ext.isObject(count) && self.record) {
                self.record.set('status', count.status);
                self.record.set('completed_part', count.completed_part);
            }
        });
    }

});