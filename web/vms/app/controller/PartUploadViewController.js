/*
 * File: app/controller/PartUploadViewController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VMS.controller.PartUploadViewController', {
    extend: 'Deft.mvc.ViewController',

    control: {
        upload: {
            validateUpload: 'onValidateUpload',
            uploadProcess: 'onComponentUploadProcess',
            uploadStarted: 'onComponentUploadStarted',
            uploadFinish: 'onComponentUploadFinish',
            uploadFailed: 'onComponentUploadFailed'
        },
        progress: true,
        content: true
    },

    init: function() {
        this.record = this.config.record;
        this.getUpload().record = this.record;
        this.getProgress().updateProgress(
        Object.keys(this.record.get('completed_part')).length / this.record.get('number_of_part')
        );
        this.getContent().update(this.record.getData());
        return this.callParent(arguments);
    },

    onValidateUpload: function(eventOptions) {
        var files = eventOptions.files;
        var errorMsg = 'This resource upload expect to be exactly 1 file';
        if (files.length === 1) {
            var record = eventOptions.record;
            if (record.get('size') !== files[0].size) {
                errorMsg = "Size does not match";
            } else if (record.get('mime_type') !== files[0].type) {
                errorMsg = "Upload mime type does not match";
            } else {
                return true;
            }
        }
        Ext.Msg.alert('Unable to Resume Upload', 'Error: ' + errorMsg);
        return false;
    },

    onComponentUploadProcess: function(eventOptions) {
        this.getProgress().updateProgress(eventOptions.progress/100);
    },

    onComponentUploadStarted: function(eventOptions) {
        this.getView().setTitle('Uploading...');
        this.record.set('uploading', true);
    },

    onComponentUploadFinish: function(eventOptions) {
        this.getView().setTitle('Uploade Done');
        this.record.set('uploading', false);
    },

    onComponentUploadFailed: function(eventOptions) {
        this.getView().setTitle('Uploade Failed');
        this.record.set('uploading', false);
    }

});